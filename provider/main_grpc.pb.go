// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderClient interface {
	ProvisionAppConfig(ctx context.Context, in *ProvisionAppConfigRequest, opts ...grpc.CallOption) (*ProvisionAppConfigResponse, error)
	DeprovisionAppConfig(ctx context.Context, in *DeprovisionAppConfigRequest, opts ...grpc.CallOption) (*DeprovisionAppConfigResponse, error)
	RestoreSnapshot(ctx context.Context, opts ...grpc.CallOption) (Provider_RestoreSnapshotClient, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) ProvisionAppConfig(ctx context.Context, in *ProvisionAppConfigRequest, opts ...grpc.CallOption) (*ProvisionAppConfigResponse, error) {
	out := new(ProvisionAppConfigResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/ProvisionAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DeprovisionAppConfig(ctx context.Context, in *DeprovisionAppConfigRequest, opts ...grpc.CallOption) (*DeprovisionAppConfigResponse, error) {
	out := new(DeprovisionAppConfigResponse)
	err := c.cc.Invoke(ctx, "/provider.Provider/DeprovisionAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) RestoreSnapshot(ctx context.Context, opts ...grpc.CallOption) (Provider_RestoreSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Provider_serviceDesc.Streams[0], "/provider.Provider/RestoreSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerRestoreSnapshotClient{stream}
	return x, nil
}

type Provider_RestoreSnapshotClient interface {
	Send(*RestoreSnapshotRequest) error
	CloseAndRecv() (*RestoreSnapshotResponse, error)
	grpc.ClientStream
}

type providerRestoreSnapshotClient struct {
	grpc.ClientStream
}

func (x *providerRestoreSnapshotClient) Send(m *RestoreSnapshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *providerRestoreSnapshotClient) CloseAndRecv() (*RestoreSnapshotResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RestoreSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility
type ProviderServer interface {
	ProvisionAppConfig(context.Context, *ProvisionAppConfigRequest) (*ProvisionAppConfigResponse, error)
	DeprovisionAppConfig(context.Context, *DeprovisionAppConfigRequest) (*DeprovisionAppConfigResponse, error)
	RestoreSnapshot(Provider_RestoreSnapshotServer) error
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServer struct {
}

func (UnimplementedProviderServer) ProvisionAppConfig(context.Context, *ProvisionAppConfigRequest) (*ProvisionAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionAppConfig not implemented")
}
func (UnimplementedProviderServer) DeprovisionAppConfig(context.Context, *DeprovisionAppConfigRequest) (*DeprovisionAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeprovisionAppConfig not implemented")
}
func (UnimplementedProviderServer) RestoreSnapshot(Provider_RestoreSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method RestoreSnapshot not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	s.RegisterService(&_Provider_serviceDesc, srv)
}

func _Provider_ProvisionAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ProvisionAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/ProvisionAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ProvisionAppConfig(ctx, req.(*ProvisionAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DeprovisionAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeprovisionAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DeprovisionAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Provider/DeprovisionAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DeprovisionAppConfig(ctx, req.(*DeprovisionAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_RestoreSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProviderServer).RestoreSnapshot(&providerRestoreSnapshotServer{stream})
}

type Provider_RestoreSnapshotServer interface {
	SendAndClose(*RestoreSnapshotResponse) error
	Recv() (*RestoreSnapshotRequest, error)
	grpc.ServerStream
}

type providerRestoreSnapshotServer struct {
	grpc.ServerStream
}

func (x *providerRestoreSnapshotServer) SendAndClose(m *RestoreSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *providerRestoreSnapshotServer) Recv() (*RestoreSnapshotRequest, error) {
	m := new(RestoreSnapshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Provider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provider.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvisionAppConfig",
			Handler:    _Provider_ProvisionAppConfig_Handler,
		},
		{
			MethodName: "DeprovisionAppConfig",
			Handler:    _Provider_DeprovisionAppConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RestoreSnapshot",
			Handler:       _Provider_RestoreSnapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "provider/main.proto",
}
